"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WithPDFInput = exports.Default = void 0;
var react_1 = __importStar(require("react"));
var index_1 = __importDefault(require("./index"));
var plugins_1 = require("./plugins");
var pdf_file_pdf_1 = __importDefault(require("./exampleFiles/pdf-file.pdf"));
var png_image_png_1 = __importDefault(require("./exampleFiles/png-image.png"));
var csv_file_csv_1 = __importDefault(require("./exampleFiles/csv-file.csv"));
/* eslint-disable import/no-anonymous-default-export */
exports.default = {
    title: "DocViewer",
};
var Default = function () {
    var docs = [{ uri: pdf_file_pdf_1.default }, { uri: png_image_png_1.default }, { uri: csv_file_csv_1.default }];
    return (react_1.default.createElement(index_1.default, { documents: docs, initialActiveDocument: docs[1], pluginRenderers: plugins_1.DocViewerRenderers, config: {
            noRenderer: {
                overrideComponent: function (_a) {
                    var document = _a.document, fileName = _a.fileName;
                    var fileText = fileName || (document === null || document === void 0 ? void 0 : document.fileType) || "";
                    console.log(document);
                    if (fileText) {
                        return react_1.default.createElement("div", null,
                            "no renderer for ",
                            fileText);
                    }
                    return react_1.default.createElement("div", null, "no renderer");
                },
            },
            loadingRenderer: {
                overrideComponent: function (_a) {
                    var document = _a.document, fileName = _a.fileName;
                    var fileText = fileName || (document === null || document === void 0 ? void 0 : document.fileType) || "";
                    if (fileText) {
                        return react_1.default.createElement("div", null,
                            "loading (",
                            fileText,
                            ")");
                    }
                    return react_1.default.createElement("div", null, "loading");
                },
            },
            csvDelimiter: ",",
            pdfZoom: {
                defaultZoom: 1.1,
                zoomJump: 0.2,
            },
        }, language: "pl" }));
};
exports.Default = Default;
var WithPDFInput = function () {
    var _a = (0, react_1.useState)([]), selectedDocs = _a[0], setSelectedDocs = _a[1];
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("input", { type: "file", accept: ".pdf", multiple: true, onChange: function (el) {
                var _a;
                return ((_a = el.target.files) === null || _a === void 0 ? void 0 : _a.length) &&
                    setSelectedDocs(Array.from(el.target.files));
            } }),
        react_1.default.createElement(index_1.default, { documents: selectedDocs.map(function (file) { return ({
                uri: window.URL.createObjectURL(file),
                fileName: file.name,
            }); }), pluginRenderers: plugins_1.DocViewerRenderers })));
};
exports.WithPDFInput = WithPDFInput;
